&T
[]T
(T, U)
func(T) U
owned T
weak T
mut T
T.U
T<U>

for i usize in 0 until length
for (i, j string) in x
for (a, b int32) in zip(array1, array2)




pub module animals
import std.io

pub trait Animal {
	pub name string
	pub age uint32
}

pub method makeNoise(animal &Animal)

pub struct Dog {
	embed Animal
	pub tag string
}

pub struct Cat {
	embed Animal
	pub breed string
}

pub func makeNoise(dog &Dog) {
	printLine("woof")
}

pub func makeNoise(cat &Cat) {
	printLine("meow")
}

pub func main() {
	var pet mut &Animal = &Dog()
	makeNoise(pet)
	pet = &Cat()
	pet->makeNoise()
}




pub module shapes
import std.math

pub struct Shape cases {
	struct Rectangle {pub length, width float64}
	struct Triangle {pub base, height float64}
	struct Circle {pub radius float64}
}

pub method area(shape &Shape) float64

pub func area(rectangle &Rectangle) {
	return rectangle.width*rectangle.height
}

pub func area(triangle &Triangle) {
	return 0.5*triangle.base*triangle.height
}

pub func area(circle &Circle) {
	return std.math.pi*circle.radius*circle.radius
}




pub module physics
import std.math
import std.operators

pub struct Entity {
	pub pos, vel, acc Vector
} cases {
	struct Circle {pub radius float64}
	struct Mesh {pub vertices owned []Vector}
}

pub struct Vector {
	embed std.operators.To<string>, .Equality<This>, .Arithmetic<This>, .Arithmetic<float>
	pub x, y, z float64
}

pub method collide(a, b &mut Entity)

pub func collide(a, b &mut Circle) {}

pub func collide(a, b &mut Mesh) {}

pub func collide(a &mut Circle, b &mut Mesh) {}

pub func collide(a &mut Mesh, b &mut Circle) {}

pub func to<=string>(vector &Vector) {
	return f"({vector.x}, {vector.y}, {vector.z})"
}




struct Color {
	r, g, b uint8
} cases {
	default struct Rgb
	red = (255, 0, 0)
	green = (0, 255, 0)
	blue = (0, 0, 255)
}
